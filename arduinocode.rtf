{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red96\green126\blue3;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c44706\c55686\c0;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
#include <BLEDevice.h>\
#include <BLEServer.h>\
#include <BLEUtils.h>\
#include <BLE2902.h>\
\
// Define your custom service and characteristic UUIDs\
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"\
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"\
\
const int ledPin = 2;\
\
// Characteristic callback: blink LED when receiving the "blink" command.\
class MyCallbacks : public BLECharacteristicCallbacks \{\
  void onWrite(BLECharacteristic *pCharacteristic) override \{\
    // Using Arduino String since our library returns String\
    String rxValue = pCharacteristic->getValue();\
    Serial.print("Received Value: ");\
    Serial.println(rxValue);\
\
    if (rxValue == "blink") \{\
      digitalWrite(ledPin, HIGH);\
      delay(500);\
      digitalWrite(ledPin, LOW);\
      delay(500);\
    \}\
  \}\
\};\
\
// Server callbacks to detect connect/disconnect events.\
// On disconnect, we restart advertising so a new session can be initiated.\
class MyServerCallbacks: public BLEServerCallbacks \{\
  void onConnect(BLEServer* pServer) override \{\
    Serial.println("Client connected");\
  \}\
  \
  void onDisconnect(BLEServer* pServer) override \{\
    Serial.println("Client disconnected, restarting advertising...");\
    pServer->getAdvertising()->start();\
  \}\
\};\
\
void setup() \{\
  Serial.begin(115200);\
  pinMode(ledPin, OUTPUT);\
  digitalWrite(ledPin, LOW);\
\
  // Initialize BLE and create the server.\
  BLEDevice::init("ESP32_BLE_LED");\
  BLEServer* pServer = BLEDevice::createServer();\
  pServer->setCallbacks(new MyServerCallbacks());\
\
  // Create the service and characteristic.\
  BLEService* pService = pServer->createService(SERVICE_UUID);\
  BLECharacteristic* pCharacteristic = pService->createCharacteristic(\
    CHARACTERISTIC_UUID,\
    BLECharacteristic::PROPERTY_WRITE\
  );\
  pCharacteristic->setCallbacks(new MyCallbacks());\
  \
  pService->start();\
  \
  // Set up advertising: include the service UUID so the iOS app can find it.\
  BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();\
  pAdvertising->addServiceUUID(SERVICE_UUID);\
  pAdvertising->setScanResponse(true);\
  pAdvertising->start();\
\
  Serial.println("BLE Advertising started. Waiting for client...");\
\}\
\
void loop() \{\
  // Nothing to do here; BLE callbacks handle all events.\
\}\
}